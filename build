{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":30892,"databundleVersionId":2715462,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!nvidia-smi","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T04:59:55.304782Z","iopub.execute_input":"2024-11-23T04:59:55.305629Z","iopub.status.idle":"2024-11-23T04:59:56.441864Z","shell.execute_reply.started":"2024-11-23T04:59:55.305593Z","shell.execute_reply":"2024-11-23T04:59:56.440454Z"}},"outputs":[{"name":"stdout","text":"Sat Nov 23 04:59:56 2024       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   67C    P0             29W /   70W |     693MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   41C    P8             12W /   70W |       3MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n+-----------------------------------------------------------------------------------------+\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"%pip install wandb\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T04:59:56.443909Z","iopub.execute_input":"2024-11-23T04:59:56.444228Z","iopub.status.idle":"2024-11-23T05:00:04.587139Z","shell.execute_reply.started":"2024-11-23T04:59:56.444197Z","shell.execute_reply":"2024-11-23T05:00:04.586132Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: wandb in /opt/conda/lib/python3.10/site-packages (0.18.3)\nRequirement already satisfied: click!=8.0.0,>=7.1 in /opt/conda/lib/python3.10/site-packages (from wandb) (8.1.7)\nRequirement already satisfied: docker-pycreds>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (0.4.0)\nRequirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (3.1.43)\nRequirement already satisfied: platformdirs in /opt/conda/lib/python3.10/site-packages (from wandb) (3.11.0)\nRequirement already satisfied: protobuf!=4.21.0,!=5.28.0,<6,>=3.19.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (3.20.3)\nRequirement already satisfied: psutil>=5.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (5.9.3)\nRequirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from wandb) (6.0.2)\nRequirement already satisfied: requests<3,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (2.32.3)\nRequirement already satisfied: sentry-sdk>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (2.15.0)\nRequirement already satisfied: setproctitle in /opt/conda/lib/python3.10/site-packages (from wandb) (1.3.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from wandb) (70.0.0)\nRequirement already satisfied: six>=1.4.0 in /opt/conda/lib/python3.10/site-packages (from docker-pycreds>=0.4.0->wandb) (1.16.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.10/site-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.11)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (2024.8.30)\nRequirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.1)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":59},{"cell_type":"code","source":"!pip install torchsummary\n!pip install torchgeometry","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:04.588384Z","iopub.execute_input":"2024-11-23T05:00:04.588686Z","iopub.status.idle":"2024-11-23T05:00:20.882644Z","shell.execute_reply.started":"2024-11-23T05:00:04.588658Z","shell.execute_reply":"2024-11-23T05:00:20.881491Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: torchsummary in /opt/conda/lib/python3.10/site-packages (1.5.1)\nRequirement already satisfied: torchgeometry in /opt/conda/lib/python3.10/site-packages (0.1.2)\nRequirement already satisfied: torch>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from torchgeometry) (2.4.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.0.0->torchgeometry) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch>=1.0.0->torchgeometry) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.0.0->torchgeometry) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.0.0->torchgeometry) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.0.0->torchgeometry) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.0.0->torchgeometry) (2024.6.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.0.0->torchgeometry) (2.1.5)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.0.0->torchgeometry) (1.3.0)\n","output_type":"stream"}],"execution_count":60},{"cell_type":"code","source":"!pip install segmentation-models-pytorch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:20.883908Z","iopub.execute_input":"2024-11-23T05:00:20.884209Z","iopub.status.idle":"2024-11-23T05:00:28.963868Z","shell.execute_reply.started":"2024-11-23T05:00:20.884181Z","shell.execute_reply":"2024-11-23T05:00:28.962999Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: segmentation-models-pytorch in /opt/conda/lib/python3.10/site-packages (0.3.4)\nRequirement already satisfied: efficientnet-pytorch==0.7.1 in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (0.7.1)\nRequirement already satisfied: huggingface-hub>=0.24.6 in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (0.25.1)\nRequirement already satisfied: pillow in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (10.3.0)\nRequirement already satisfied: pretrainedmodels==0.7.4 in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (0.7.4)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (1.16.0)\nRequirement already satisfied: timm==0.9.7 in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (0.9.7)\nRequirement already satisfied: torchvision>=0.5.0 in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (0.19.0)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from segmentation-models-pytorch) (4.66.4)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from efficientnet-pytorch==0.7.1->segmentation-models-pytorch) (2.4.0)\nRequirement already satisfied: munch in /opt/conda/lib/python3.10/site-packages (from pretrainedmodels==0.7.4->segmentation-models-pytorch) (4.0.0)\nRequirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from timm==0.9.7->segmentation-models-pytorch) (6.0.2)\nRequirement already satisfied: safetensors in /opt/conda/lib/python3.10/site-packages (from timm==0.9.7->segmentation-models-pytorch) (0.4.5)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.24.6->segmentation-models-pytorch) (3.15.1)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.24.6->segmentation-models-pytorch) (2024.6.1)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.24.6->segmentation-models-pytorch) (21.3)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.24.6->segmentation-models-pytorch) (2.32.3)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.24.6->segmentation-models-pytorch) (4.12.2)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torchvision>=0.5.0->segmentation-models-pytorch) (1.26.4)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface-hub>=0.24.6->segmentation-models-pytorch) (3.1.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->efficientnet-pytorch==0.7.1->segmentation-models-pytorch) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->efficientnet-pytorch==0.7.1->segmentation-models-pytorch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->efficientnet-pytorch==0.7.1->segmentation-models-pytorch) (3.1.4)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.24.6->segmentation-models-pytorch) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.24.6->segmentation-models-pytorch) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.24.6->segmentation-models-pytorch) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.24.6->segmentation-models-pytorch) (2024.8.30)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->efficientnet-pytorch==0.7.1->segmentation-models-pytorch) (2.1.5)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->efficientnet-pytorch==0.7.1->segmentation-models-pytorch) (1.3.0)\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import Dataset, DataLoader, random_split\nimport albumentations as A\n\nimport segmentation_models_pytorch as smp\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nimport time\nfrom PIL import Image\nimport os\n\nimport wandb\nfrom torchsummary import summary","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:28.966142Z","iopub.execute_input":"2024-11-23T05:00:28.966454Z","iopub.status.idle":"2024-11-23T05:00:28.971990Z","shell.execute_reply.started":"2024-11-23T05:00:28.966425Z","shell.execute_reply":"2024-11-23T05:00:28.971082Z"}},"outputs":[],"execution_count":62},{"cell_type":"markdown","source":"# Parameters","metadata":{}},{"cell_type":"code","source":"BATCH_SIZE = 6","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:28.972929Z","iopub.execute_input":"2024-11-23T05:00:28.973246Z","iopub.status.idle":"2024-11-23T05:00:28.982466Z","shell.execute_reply.started":"2024-11-23T05:00:28.973220Z","shell.execute_reply":"2024-11-23T05:00:28.981700Z"}},"outputs":[],"execution_count":63},{"cell_type":"markdown","source":"# Load Data","metadata":{}},{"cell_type":"code","source":"IMAGES_PATH = \"/kaggle/input/bkai-igh-neopolyp/train/train/\"\nMASKS_PATH =  \"/kaggle/input/bkai-igh-neopolyp/train_gt/train_gt/\"\nTEST_PATH = \"/kaggle/input/bkai-igh-neopolyp/test/test/\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:28.983492Z","iopub.execute_input":"2024-11-23T05:00:28.983808Z","iopub.status.idle":"2024-11-23T05:00:28.992510Z","shell.execute_reply.started":"2024-11-23T05:00:28.983783Z","shell.execute_reply":"2024-11-23T05:00:28.991766Z"}},"outputs":[],"execution_count":64},{"cell_type":"markdown","source":"### transform","metadata":{}},{"cell_type":"code","source":"#transf with ImageNet statistics\ntransform = transforms.Compose([\n    transforms.Resize((256, 256)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean = [0.485, 0.456, 0.406], std = [0.229, 0.224, 0.225])\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:28.993728Z","iopub.execute_input":"2024-11-23T05:00:28.994025Z","iopub.status.idle":"2024-11-23T05:00:29.004181Z","shell.execute_reply.started":"2024-11-23T05:00:28.993981Z","shell.execute_reply":"2024-11-23T05:00:29.003655Z"}},"outputs":[],"execution_count":65},{"cell_type":"code","source":"mask_transform = transforms.Compose([\n    transforms.Resize((256, 256), interpolation=transforms.InterpolationMode.NEAREST),  # Use NEAREST to preserve labels\n    transforms.ToTensor(), \n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.005322Z","iopub.execute_input":"2024-11-23T05:00:29.005576Z","iopub.status.idle":"2024-11-23T05:00:29.015815Z","shell.execute_reply.started":"2024-11-23T05:00:29.005552Z","shell.execute_reply":"2024-11-23T05:00:29.014973Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"# transf with calculated mean, std\ninit_transform = transforms.ToTensor(),\n\nimg_tr = init_transform(img)\n \n# calculate mean and std of each RGB layer\nmean, std = img_tr.mean([1,2]), img_tr.std([1,2])\n\ntransform_norm = transforms.Compose([\n    transforms.Resize((256, 256)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean, std)\n])\n \n# get normalized image\nimg_normalized = transform_norm(img)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.016722Z","iopub.execute_input":"2024-11-23T05:00:29.016969Z","iopub.status.idle":"2024-11-23T05:00:29.059475Z","shell.execute_reply.started":"2024-11-23T05:00:29.016945Z","shell.execute_reply":"2024-11-23T05:00:29.057936Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[67], line 4\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# transf with calculated mean, std\u001b[39;00m\n\u001b[1;32m      2\u001b[0m init_transform \u001b[38;5;241m=\u001b[39m transforms\u001b[38;5;241m.\u001b[39mToTensor(),\n\u001b[0;32m----> 4\u001b[0m img_tr \u001b[38;5;241m=\u001b[39m init_transform(\u001b[43mimg\u001b[49m)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# calculate mean and std of each RGB layer\u001b[39;00m\n\u001b[1;32m      7\u001b[0m mean, std \u001b[38;5;241m=\u001b[39m img_tr\u001b[38;5;241m.\u001b[39mmean([\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m]), img_tr\u001b[38;5;241m.\u001b[39mstd([\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m])\n","\u001b[0;31mNameError\u001b[0m: name 'img' is not defined"],"ename":"NameError","evalue":"name 'img' is not defined","output_type":"error"}],"execution_count":67},{"cell_type":"markdown","source":"### Data","metadata":{}},{"cell_type":"code","source":"class CustomDataset(Dataset):\n    def __init__(self, image_paths, mask_paths, transform=None, mask_transform=None, color_map=None):\n        self.image_paths = image_paths\n        self.mask_paths = mask_paths\n        self.transform = transform\n        self.mask_transform = mask_transform\n        self.color_map = color_map or {\n            (255, 0, 0): 1,  # Red (neoplastic polyps)\n            (0, 255, 0): 2   # Green (non-neoplastic polyps)\n        }\n\n    def __len__(self):\n        return len(self.image_paths)\n\n    def encode_mask(self, mask):\n        \"\"\"\n        Encode RGB mask into single-channel class labels.\n        \"\"\"\n        encoded_mask = np.zeros(mask.shape[:2], dtype=np.uint8)\n        for color, label in self.color_map.items():\n            condition = (mask[:, :, 0] == color[0]) & (mask[:, :, 1] == color[1]) & (mask[:, :, 2] == color[2])\n            encoded_mask[condition] = label\n        return encoded_mask\n\n    def __getitem__(self, idx):\n\n        img_path = self.image_paths[idx]\n        mask_path = self.mask_paths[idx]\n\n        img = cv2.imread(img_path)\n        if img is None:\n            raise FileNotFoundError(f\"Image not found at {img_path}\")\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n\n        mask = cv2.imread(mask_path)\n        if mask is None:\n            raise FileNotFoundError(f\"Mask not found at {mask_path}\")\n        mask = cv2.cvtColor(mask, cv2.COLOR_BGR2RGB)\n        mask = self.encode_mask(mask)\n\n\n        if self.transform:\n            img = self.transform(img)\n\n        if self.mask_transform:\n            #mask = torch.from_numpy(mask).long()\n            mask = self.mask_transform(mask).squeeze(0).long()\n\n        return img, mask\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.059945Z","iopub.status.idle":"2024-11-23T05:00:29.060206Z","shell.execute_reply.started":"2024-11-23T05:00:29.060073Z","shell.execute_reply":"2024-11-23T05:00:29.060087Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"image_paths = []\nfor root, dirs, files in os.walk(IMAGES_PATH):\n    for file in files:\n        path = os.path.join(root,file)\n        image_paths.append(path)\n        \nlen(image_paths)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.061201Z","iopub.status.idle":"2024-11-23T05:00:29.061587Z","shell.execute_reply.started":"2024-11-23T05:00:29.061417Z","shell.execute_reply":"2024-11-23T05:00:29.061442Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mask_paths = []\nfor root, dirs, files in os.walk(MASKS_PATH):\n    for file in files:\n        path = os.path.join(root,file)\n        mask_paths.append(path)\n        \nlen(mask_paths)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.062774Z","iopub.status.idle":"2024-11-23T05:00:29.063223Z","shell.execute_reply.started":"2024-11-23T05:00:29.063003Z","shell.execute_reply":"2024-11-23T05:00:29.063024Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"init_dataset = CustomDataset(image_paths, mask_paths, transform = transform, mask_transform=mask_transform)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.064737Z","iopub.status.idle":"2024-11-23T05:00:29.065164Z","shell.execute_reply.started":"2024-11-23T05:00:29.064948Z","shell.execute_reply":"2024-11-23T05:00:29.064970Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_size = int(len(init_dataset) * 0.80)\nvalid_size = len(init_dataset) - train_size","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.066660Z","iopub.status.idle":"2024-11-23T05:00:29.067094Z","shell.execute_reply.started":"2024-11-23T05:00:29.066868Z","shell.execute_reply":"2024-11-23T05:00:29.066892Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"torch.manual_seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.068550Z","iopub.status.idle":"2024-11-23T05:00:29.068852Z","shell.execute_reply.started":"2024-11-23T05:00:29.068703Z","shell.execute_reply":"2024-11-23T05:00:29.068719Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_set, valid_set = random_split(init_dataset, [train_size, valid_size])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.070230Z","iopub.status.idle":"2024-11-23T05:00:29.070646Z","shell.execute_reply.started":"2024-11-23T05:00:29.070414Z","shell.execute_reply":"2024-11-23T05:00:29.070430Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Data Loader","metadata":{}},{"cell_type":"code","source":"train_loader = DataLoader(train_set, batch_size=BATCH_SIZE, shuffle=True)\nval_loader = DataLoader(valid_set, batch_size=BATCH_SIZE, shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.072077Z","iopub.status.idle":"2024-11-23T05:00:29.072588Z","shell.execute_reply.started":"2024-11-23T05:00:29.072278Z","shell.execute_reply":"2024-11-23T05:00:29.072321Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Hyperparameters","metadata":{}},{"cell_type":"code","source":"NUM_CLASSES = 3\nNUM_EPOCHS = 50\nLEARNING_RATE = 1e-04\n\nCHECKPOINT_PATH = '/kaggle/working/unet-model.pth'\n\nPreTrained_path = \"/kaggle/input/unet-checkpoint/unet-model.pth\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.074120Z","iopub.status.idle":"2024-11-23T05:00:29.074555Z","shell.execute_reply.started":"2024-11-23T05:00:29.074330Z","shell.execute_reply":"2024-11-23T05:00:29.074353Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nDEVICE","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.076157Z","iopub.status.idle":"2024-11-23T05:00:29.076591Z","shell.execute_reply.started":"2024-11-23T05:00:29.076366Z","shell.execute_reply":"2024-11-23T05:00:29.076388Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"UNET = smp.UnetPlusPlus(\n    encoder_name=\"resnet34\",        \n    encoder_weights=\"imagenet\",      \n    decoder_use_batchnorm=True,\n    in_channels=3, \n    classes= NUM_CLASSES,\n    activation= 'softmax'\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.077804Z","iopub.status.idle":"2024-11-23T05:00:29.078231Z","shell.execute_reply.started":"2024-11-23T05:00:29.078003Z","shell.execute_reply":"2024-11-23T05:00:29.078027Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Wandb para","metadata":{}},{"cell_type":"code","source":"model = UNET.to(DEVICE)\nsummary(model, (3, 256, 256))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.079482Z","iopub.status.idle":"2024-11-23T05:00:29.079913Z","shell.execute_reply.started":"2024-11-23T05:00:29.079682Z","shell.execute_reply":"2024-11-23T05:00:29.079703Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"PROJECT = \"BKAI-IGH NeoPolyp\"\nRESUME = \"allow\"\nWANDB_KEY = \"d9d14819dddd8a35a353b5c0b087e0f60d717140\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.081199Z","iopub.status.idle":"2024-11-23T05:00:29.081643Z","shell.execute_reply.started":"2024-11-23T05:00:29.081432Z","shell.execute_reply":"2024-11-23T05:00:29.081454Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Set up","metadata":{}},{"cell_type":"code","source":"loss_fn = nn.CrossEntropyLoss(reduction='sum')\noptimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.084031Z","iopub.status.idle":"2024-11-23T05:00:29.084485Z","shell.execute_reply.started":"2024-11-23T05:00:29.084225Z","shell.execute_reply":"2024-11-23T05:00:29.084245Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wandb.login(\n    key = \"d9d14819dddd8a35a353b5c0b087e0f60d717140\",\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.085241Z","iopub.status.idle":"2024-11-23T05:00:29.085631Z","shell.execute_reply.started":"2024-11-23T05:00:29.085429Z","shell.execute_reply":"2024-11-23T05:00:29.085452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wandb.init(\n    project=PROJECT,\n    resume=RESUME,\n    name=\"init_model\",\n    config={\n        \"learning_rate\": LEARNING_RATE,\n        \"epochs\": NUM_EPOCHS,\n        \"batch_size\": BATCH_SIZE,\n        \"weight_initialization\": \"ImageNet\",\n    },\n)\nwandb.watch(model)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.086400Z","iopub.status.idle":"2024-11-23T05:00:29.087923Z","shell.execute_reply.started":"2024-11-23T05:00:29.087684Z","shell.execute_reply":"2024-11-23T05:00:29.087707Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Training","metadata":{}},{"cell_type":"code","source":"best_val_loss = 999\n\nfor epoch in range(1, NUM_EPOCHS + 1):\n    start_time = time.time()\n    model.train() # Turn on train mode for gradient updates\n    train_loss = 0\n    train_accuracy = 0\n    for data, target in train_loader:\n        data, target = data.to(DEVICE), target.to(DEVICE)\n        optimizer.zero_grad()\n        output = model(data)\n        loss = loss_fn(output, target)\n        loss.backward()\n        optimizer.step()\n        # Update metrics\n        train_loss += loss.item()\n        pred = output.argmax(dim=1, keepdim=True)\n        train_accuracy += pred.eq(target.view_as(pred)).sum().item()\n    train_loss /= len(train_loader.dataset)\n    train_accuracy /= len(train_loader.dataset)\n    time_taken = time.time() - start_time\n\n    model.eval() # Turn on train mode to disable gradient updates\n    val_loss = 0\n    val_accuracy = 0\n    with torch.no_grad():\n        for data, target in val_loader:\n            data, target = data.to(DEVICE), target.to(DEVICE)\n            output = model(data)\n            loss = loss_fn(output, target)\n            # Update metrics\n            val_loss += loss\n            pred = output.argmax(dim = 1, keepdim = True)\n            val_accuracy += pred.eq(target.view_as(pred)).sum().item()\n    val_loss /= len(val_loader.dataset)\n    val_accuracy /= len(val_loader.dataset)\n\n    # Log metrics\n    print(\n        f\"Epoch {epoch}: Train Loss: {train_loss:.4f} | \\\n        Train Accuracy: {train_accuracy:.4f} | \\\n        Test Loss: {val_loss:.4f} | \\\n        Test Accuracy: {val_accuracy:.4f} | \\\n        Time taken: {time_taken:.4f}\"\n    )\n    if val_loss < best_val_loss:\n        best_val_loss = val_loss\n        torch.save(model.state_dict(), CHECKPOINT_PATH)\n        print(\"New best checkpoint saved!\")\n\n    # Log results to WandB\n    wandb.log({\n        \"epoch\": epoch,\n        \"train_loss\": train_loss,\n        \"train_accuracy\": train_accuracy,\n        \"val_loss\": val_loss,\n        \"val_accuracy\": val_accuracy,\n    })\n\nwandb.finish()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.089007Z","iopub.status.idle":"2024-11-23T05:00:29.089412Z","shell.execute_reply.started":"2024-11-23T05:00:29.089199Z","shell.execute_reply":"2024-11-23T05:00:29.089221Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def save_model(model, optimizer, path):\n    checkpoint = {\n        \"model\": model.state_dict(),\n        \"optimizer\": optimizer.state_dict(),\n    }\n    torch.save(checkpoint, path)\n\ndef load_model(model, optimizer, path):\n    checkpoint = torch.load(path)\n    model.load_state_dict(checkpoint[\"model\"])\n    optimizer.load_state_dict(checkpoint['optimizer'])\n    return model, optimizer","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T05:00:29.090572Z","iopub.status.idle":"2024-11-23T05:00:29.091169Z","shell.execute_reply.started":"2024-11-23T05:00:29.090944Z","shell.execute_reply":"2024-11-23T05:00:29.090968Z"}},"outputs":[],"execution_count":null}]}